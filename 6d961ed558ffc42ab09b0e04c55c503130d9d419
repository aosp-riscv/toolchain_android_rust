{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8d567038_4af9f158",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 26,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-11-03T01:46:30Z",
      "side": 1,
      "message": "3.9+ doesn\u0027t need Tuple (just use `tuple`). 3.10+ doesn\u0027t need Union (can use |), but I don\u0027t think the platform is there yet...",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ccebaadd_9dcb0041",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 26,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-04T00:01:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8d567038_4af9f158",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "338c1ffd_eb07f1c0",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-11-03T01:46:30Z",
      "side": 1,
      "message": "Style nit that you can ignore since idk what you\u0027re following here: Python generally discourages wildcard imports (https://www.python.org/dev/peps/pep-0008/#imports)",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9aad401f_b77c49df",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-04T00:01:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "338c1ffd_eb07f1c0",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "145e0f2d_b02ee193",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 33,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-11-03T01:46:30Z",
      "side": 1,
      "message": "mypy is smart enough to do type deduction for almost anything, fwiw. It can be configured to yell when it _can\u0027t_ deduce a type for you (by default anything not deduced is assumed to be Any). mypy has a --strict, but you can also add a mypy.ini to configure the defaults. Thanks for the kick to finally get around to cranking up the checks in the NDK, here\u0027s an example: https://android-review.googlesource.com/c/platform/ndk/+/1878938",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5c3c626d_756e9154",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 33,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-09T01:52:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "145e0f2d_b02ee193",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c183a224_94ba1fcc",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2021-11-02T21:37:47Z",
      "side": 1,
      "message": "With us moving to git submodules, I\u0027m not sure manifests will be there forever, maybe Dan can weigh in on whether the manifest is the best way for us to record how the prebuilt was created?\n\nBuild IDs are sufficient to figure it out internally, but either the output of `git submodule` (no arguments) or a `manifest.xml` snapshot file is more explicit transparent.",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfc480a5_c5e2bd2c",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-02T22:17:46Z",
      "side": 1,
      "message": "This was based on a modified LLVM toolchain script that Steve was working on in response to a partner request.  If there is a better or more reliable way to do this I\u0027d love to implement it.",
      "parentUuid": "c183a224_94ba1fcc",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4f87655_0206f18f",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-11-03T01:46:30Z",
      "side": 1,
      "message": "This variable is unused anyway.",
      "parentUuid": "dfc480a5_c5e2bd2c",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ebc95166_21115a7a",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-04T00:01:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f4f87655_0206f18f",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cdb14a4_fb9f6682",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 70,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-11-03T01:46:30Z",
      "side": 1,
      "message": "This appears to be optional, so you want `Optional[int]`.",
      "range": {
        "startLine": 70,
        "startChar": 72,
        "endLine": 70,
        "endChar": 82
      },
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9aa3ff0d_6b5d678e",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 70,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-04T00:01:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7cdb14a4_fb9f6682",
      "range": {
        "startLine": 70,
        "startChar": 72,
        "endLine": 70,
        "endChar": 82
      },
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "650ec722_9aa2f5ca",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 77,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-11-03T01:46:30Z",
      "side": 1,
      "message": "Not that we\u0027re going to have an issue #0... but I learned the hard way that `if issue is not None` is better (I caused a droidfood outage by doing this in the OTA)",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa406c43_c530096a",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 77,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-04T00:01:48Z",
      "side": 1,
      "message": "Lol, good to know.",
      "parentUuid": "650ec722_9aa2f5ca",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a4dfee6_f57f6ece",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-11-03T01:46:30Z",
      "side": 1,
      "message": "`commit_message +\u003d f\"\\nBug: https://issuetracker.google.com/issues/{issue}\"` so it\u0027s hyperlinked in places other than just gerrit.\n\nAlternatively, make it a str and just let the user put the URL in themselves (with auto-URLization of plain ints, probably). You may want to refer to upstream rust bugs here and those are on github, not buganizer.",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aeb0326f_c826178d",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-04T00:01:48Z",
      "side": 1,
      "message": "For now we\u0027ll stick with the issuetracker URLs and I\u0027ll allow arbitrary URLs if we need them in the future.",
      "parentUuid": "7a4dfee6_f57f6ece",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1eca3bcf_2cc2cf7f",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 88,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-11-03T01:46:30Z",
      "side": 1,
      "message": "There\u0027s no reason for this to be a class. In fact I think you tricked yourself into accidentally not using it, because it\u0027s never invoked, only constructed.",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "faa155c1_20f2588c",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 88,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-04T00:01:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1eca3bcf_2cc2cf7f",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d5dc00a_1ef0cf50",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 92,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-11-03T01:46:30Z",
      "side": 1,
      "message": "Unused.",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "21a4fd29_5222c6dc",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 92,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-04T00:01:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9d5dc00a_1ef0cf50",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cbe715b_98fab384",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 107,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2021-11-02T21:37:47Z",
      "side": 1,
      "message": "Will this potentially do the wrong thing if there\u0027s something in the cache with the wrong bid or target from a previous run?",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09ba44fd_68abe542",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 107,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-02T22:17:46Z",
      "side": 1,
      "message": "All of the artifacts include the build ID (and target) in their name, so as long as the build IDs are unique this should be fine.  Please correct me if I\u0027ve made an incorrect assumption here.",
      "parentUuid": "8cbe715b_98fab384",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "628af610_7a1eefd3",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 107,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2021-11-02T23:09:13Z",
      "side": 1,
      "message": "I think that\u0027s correct for current uses now that I\u0027ve reviewed it. It\u0027s a little brittle because:\n\n* Technically `build_server_name` need not include the bid, it just happens to.\n* Even if `build_server_name` is always unique, `host_name` could easily not be.\n\nAgain, in all your cases you\u0027ve used it safely so I\u0027m closing this, but this could be easy to mess up as the codebase evolves.",
      "parentUuid": "09ba44fd_68abe542",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2ebfee0_0bf0132b",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 107,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-11-03T01:46:30Z",
      "side": 1,
      "message": "Should be fine, and if for some reason it isn\u0027t at least there\u0027s UI feedback to show that the cache is used.",
      "parentUuid": "09ba44fd_68abe542",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5ae06a1c_c61af2ab",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 107,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-04T00:01:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d2ebfee0_0bf0132b",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce8960ef_b01bf959",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2021-11-02T21:37:47Z",
      "side": 1,
      "message": "I feel like this should be autodetectable (unless we want to do e.g. 1.55.0p1 or similar if Rust hasn\u0027t re-released, but we want to), but we don\u0027t need to do that in this CL.",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "981ff092_a5d169e6",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-02T22:17:46Z",
      "side": 1,
      "message": "The only way I can think of to extract this automatically is by unpacking the artifact and interrogating the rustc binary.  That\u0027s not the worst thing in the world, but it seems like extra work for little benefit, especially when I think we do want to support local re-releases like you mentioned.  Thoughts?",
      "parentUuid": "ce8960ef_b01bf959",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c97c9e8a_7e07274e",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2021-11-02T23:12:59Z",
      "side": 1,
      "message": "Yeah, I was assuming we\u0027d run `unpacked/rustc --version`. If we want to be able to do re-releases, that would only work if our re-releases included an internal bump to the rustc version which I don\u0027t think is supported (since they would bump it to 1.55.1, which we explicitly would want to avoid). This is much more minor, but would basically be another step towards fully automating the process (e.g. once every 6 weeks, a set of CLs is produced and automatically tested by CI, and *then* handed off to us for review after it works or breaks). Patch releases requiring a manual version specification would not be a problem for that, as they wouldn\u0027t be part of a fully automated roller.",
      "parentUuid": "981ff092_a5d169e6",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1022cd6_7e7663ec",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 136,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-11-03T01:46:30Z",
      "side": 1,
      "message": "This is implicit, btw.",
      "range": {
        "startLine": 136,
        "startChar": 42,
        "endLine": 136,
        "endChar": 55
      },
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cba70c3e_69af5647",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 136,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-04T00:01:48Z",
      "side": 1,
      "message": "Do you know how it chooses which spelling to use when multiple are given for an argument?",
      "parentUuid": "b1022cd6_7e7663ec",
      "range": {
        "startLine": 136,
        "startChar": 42,
        "endLine": 136,
        "endChar": 55
      },
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa19187e_814cf1b1",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 136,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-11-09T20:43:20Z",
      "side": 1,
      "message": "When there\u0027s a short and long argument, the long argument is the dest. When there are multiple long arguments, I think the explicit dest is the right call.",
      "parentUuid": "cba70c3e_69af5647",
      "range": {
        "startLine": 136,
        "startChar": 42,
        "endLine": 136,
        "endChar": 55
      },
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f78d968_0c70822e",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 148,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-11-03T01:46:30Z",
      "side": 1,
      "message": "Return types this complex are worthy of a docstring or a type alias.",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f28e025_0bb3a06f",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 148,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-11-03T01:46:30Z",
      "side": 1,
      "message": "Just `tuple`. No need to import any of the common types from typing as of 3.9.",
      "range": {
        "startLine": 148,
        "startChar": 58,
        "endLine": 148,
        "endChar": 63
      },
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "00ada777_474e2104",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 148,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-04T00:01:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0f78d968_0c70822e",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3383597_3da70d17",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 148,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-04T00:01:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3f28e025_0bb3a06f",
      "range": {
        "startLine": 148,
        "startChar": 58,
        "endLine": 148,
        "endChar": 63
      },
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0590cf3_ad62ca78",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 154,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-11-03T01:46:30Z",
      "side": 1,
      "message": "`sys.exit` accepts a string. `sys.exit(f\"Provided prebuilt archive does not exist: {ident.as_posix()}\")` is the typical way to write this unless the exact error code is important.\n\nAnd actually, I think everywhere you\u0027ve done this you\u0027ll be better served by `raise RuntimeError(...)`. `sys.exit` does the practically same thing with less context for the user.",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed458c28_0e7920cc",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 154,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-04T00:01:48Z",
      "side": 1,
      "message": "It looks like `sys.exit` results in a retcode of 1 if passed a string, which is what we want as the code should indicate a program failure.\n\nI actually don\u0027t want a stack trace here as these aren\u0027t program errors but environment errors.  As long as enough information is provided by the message the call stack only gets in the way.",
      "parentUuid": "e0590cf3_ad62ca78",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3f18336_b91b13f8",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 166,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-11-03T01:46:30Z",
      "side": 1,
      "message": "Stray?",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5e9d1a91_ed10a6f1",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 166,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-04T00:01:48Z",
      "side": 1,
      "message": "This is meant to make the fetch/cache messages visually distinct from the rest of the output.  I\u0027ve added a comment to that effect.",
      "parentUuid": "b3f18336_b91b13f8",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86016e56_5b92090e",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 194,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-11-03T01:46:30Z",
      "side": 1,
      "message": "str",
      "range": {
        "startLine": 194,
        "startChar": 63,
        "endLine": 194,
        "endChar": 67
      },
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5c799f9a_836c0667",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 194,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-04T00:01:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "86016e56_5b92090e",
      "range": {
        "startLine": 194,
        "startChar": 63,
        "endLine": 194,
        "endChar": 67
      },
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "976e3be9_2cb620d5",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 198,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-11-03T01:46:30Z",
      "side": 1,
      "message": "search? match is a footgun so even when I want it I usually use search and add the ^\n\nhttps://docs.python.org/3/library/re.html#search-vs-match",
      "range": {
        "startLine": 198,
        "startChar": 49,
        "endLine": 198,
        "endChar": 54
      },
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "544723be_d04503a8",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 198,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-04T00:01:48Z",
      "side": 1,
      "message": "`match` is definitely a footgun that I\u0027ve already shot myself with.  I left this as a `match` as it worked as is, but standardizing on `search` seems like the better bet.",
      "parentUuid": "976e3be9_2cb620d5",
      "range": {
        "startLine": 198,
        "startChar": 49,
        "endLine": 198,
        "endChar": 54
      },
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b81df86_2bec753a",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 244,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-11-03T01:46:30Z",
      "side": 1,
      "message": "Typically no need to `re.compile` something used locally. The stdlib automatically precompiles and caches them internally: https://stackoverflow.com/a/452143/632035",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6cd5617_ab9e8919",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 244,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-04T00:01:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4b81df86_2bec753a",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a031a01e_a4d265a0",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 276,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2021-11-02T21:37:47Z",
      "side": 1,
      "message": "Again, not in this change, but maybe this tool should also produce the commits for:\n* Updating build/soong\n* Deleting the old rustc\n* Updating STAGE0 in the rustc build.\n\nAnyone doing this step would almost always want those commits too, even if they aren\u0027t going to land them all at the same time.",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0ee5a55_229a8913",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 276,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-02T22:17:46Z",
      "side": 1,
      "message": "The only one of those I see a problem with is the build/soong change.  The Rust toolchain manifest doesn\u0027t include build/soong so you\u0027d have to supply a path to an AOSP tree.",
      "parentUuid": "a031a01e_a4d265a0",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "afd62c96_255e2c0d",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 276,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2021-11-02T23:12:59Z",
      "side": 1,
      "message": "If we did this, we could map build/soong into the Rust toolchain manifest just for this. There should be a regex for which projects trigger a rebuild, so we could just not include build/soong in that list.",
      "parentUuid": "e0ee5a55_229a8913",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e34992b_09e876ff",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 276,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-11-03T01:46:30Z",
      "side": 1,
      "message": "Could you alternatively put this script in development/scripts and run it there? idk how this gets used so maybe that\u0027s an awful idea.",
      "parentUuid": "e0ee5a55_229a8913",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ac971e4_7d6c76fa",
        "filename": "utils.py",
        "patchSetId": 5
      },
      "lineNbr": 27,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-11-03T01:46:30Z",
      "side": 1,
      "message": "O_O\n\nWhy?",
      "range": {
        "startLine": 27,
        "startChar": 42,
        "endLine": 27,
        "endChar": 57
      },
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16983932_25a23b8f",
        "filename": "utils.py",
        "patchSetId": 5
      },
      "lineNbr": 27,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-04T00:01:48Z",
      "side": 1,
      "message": "So I didn\u0027t have to manually break my arguments into an array and manually resolve the executable\u0027s path.  I\u0027ll stop being lazy and fix this.",
      "parentUuid": "4ac971e4_7d6c76fa",
      "range": {
        "startLine": 27,
        "startChar": 42,
        "endLine": 27,
        "endChar": 57
      },
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bdab60c_f4eec8b7",
        "filename": "utils.py",
        "patchSetId": 5
      },
      "lineNbr": 52,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-11-03T01:46:30Z",
      "side": 1,
      "message": "`|` is dict.update, right? I think the defaults here will override anything the caller passes.",
      "range": {
        "startLine": 52,
        "startChar": 46,
        "endLine": 52,
        "endChar": 80
      },
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "169b9992_c54c7783",
        "filename": "utils.py",
        "patchSetId": 5
      },
      "lineNbr": 52,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-04T00:01:48Z",
      "side": 1,
      "message": "You\u0027d think so, wouldn\u0027t you. But no, it\u0027s backwards.  Keys from `kwargs` will take precedence over the defaults.\n\nE.g. `{\u0027cat\u0027: \u0027bark\u0027, \u0027dog\u0027: \u0027bark\u0027} | {\u0027cat\u0027: \u0027meow\u0027}`",
      "parentUuid": "4bdab60c_f4eec8b7",
      "range": {
        "startLine": 52,
        "startChar": 46,
        "endLine": 52,
        "endChar": 80
      },
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22ddfd25_8f6e3781",
        "filename": "utils.py",
        "patchSetId": 5
      },
      "lineNbr": 54,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-11-03T01:46:30Z",
      "side": 1,
      "message": "IME these are super annoying to debug when the command that failed isn\u0027t included in the error message.",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ac62eb47_b49400f7",
        "filename": "utils.py",
        "patchSetId": 5
      },
      "lineNbr": 54,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-04T00:01:48Z",
      "side": 1,
      "message": "For commands that are run through this helper failure is one of the expected outcomes.  As such, when a failure occurs it isn\u0027t a program bug but instead an indication that something is wrong with the environment.  The error message should provide enough context to fix this without a backtrace.",
      "parentUuid": "22ddfd25_8f6e3781",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3f7b022_443ae0dc",
        "filename": "utils.py",
        "patchSetId": 5
      },
      "lineNbr": 55,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-11-03T01:46:30Z",
      "side": 1,
      "message": "The fact that these are implicitly fatal on failure was not clear when I was reading all the callsites in the previous file. I\u0027d recommend appending renaming the set `handle_command_or_die` or `handle_command_require_success` or something like that to be clear, or alternatively just don\u0027t do this and have the caller call them with `check\u003dTrue`.",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "52e3f789_8f6e2f19",
        "filename": "utils.py",
        "patchSetId": 5
      },
      "lineNbr": 55,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-04T00:01:48Z",
      "side": 1,
      "message": "I don\u0027t want these to generate backtraces, so I think I\u0027m going to rename these to `run_failable_command`.",
      "parentUuid": "a3f7b022_443ae0dc",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcabacc7_47fe8841",
        "filename": "utils.py",
        "patchSetId": 5
      },
      "lineNbr": 71,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-11-03T01:46:30Z",
      "side": 1,
      "message": "Better is to just not use shell\u003dTrue.",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8f7fca6_3f21f47e",
        "filename": "utils.py",
        "patchSetId": 5
      },
      "lineNbr": 71,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-04T00:01:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fcabacc7_47fe8841",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e163f1f4_52c278ef",
        "filename": "utils.py",
        "patchSetId": 5
      },
      "lineNbr": 176,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2021-11-03T01:46:30Z",
      "side": 1,
      "message": "`Path.write_text()` is basically this.",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6bd38f2_20e51555",
        "filename": "utils.py",
        "patchSetId": 5
      },
      "lineNbr": 176,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-04T00:01:48Z",
      "side": 1,
      "message": "For these use cases the file is already open as we needed to read from it first.  It seems like this is a slightly better solution for that as we don\u0027t need to re-open the file.  Thoughts?\n\nThanks for the `Path.write_text()` pointer though.  I was looking for that.",
      "parentUuid": "e163f1f4_52c278ef",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "11cf9944_fb996f36",
        "filename": "utils.py",
        "patchSetId": 5
      },
      "lineNbr": 176,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-09T01:52:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a6bd38f2_20e51555",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}