{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c183a224_94ba1fcc",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2021-11-02T21:37:47Z",
      "side": 1,
      "message": "With us moving to git submodules, I\u0027m not sure manifests will be there forever, maybe Dan can weigh in on whether the manifest is the best way for us to record how the prebuilt was created?\n\nBuild IDs are sufficient to figure it out internally, but either the output of `git submodule` (no arguments) or a `manifest.xml` snapshot file is more explicit transparent.",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfc480a5_c5e2bd2c",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-02T22:17:46Z",
      "side": 1,
      "message": "This was based on a modified LLVM toolchain script that Steve was working on in response to a partner request.  If there is a better or more reliable way to do this I\u0027d love to implement it.",
      "parentUuid": "c183a224_94ba1fcc",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cbe715b_98fab384",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 107,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2021-11-02T21:37:47Z",
      "side": 1,
      "message": "Will this potentially do the wrong thing if there\u0027s something in the cache with the wrong bid or target from a previous run?",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09ba44fd_68abe542",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 107,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-02T22:17:46Z",
      "side": 1,
      "message": "All of the artifacts include the build ID (and target) in their name, so as long as the build IDs are unique this should be fine.  Please correct me if I\u0027ve made an incorrect assumption here.",
      "parentUuid": "8cbe715b_98fab384",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "628af610_7a1eefd3",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 107,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2021-11-02T23:09:13Z",
      "side": 1,
      "message": "I think that\u0027s correct for current uses now that I\u0027ve reviewed it. It\u0027s a little brittle because:\n\n* Technically `build_server_name` need not include the bid, it just happens to.\n* Even if `build_server_name` is always unique, `host_name` could easily not be.\n\nAgain, in all your cases you\u0027ve used it safely so I\u0027m closing this, but this could be easy to mess up as the codebase evolves.",
      "parentUuid": "09ba44fd_68abe542",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce8960ef_b01bf959",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2021-11-02T21:37:47Z",
      "side": 1,
      "message": "I feel like this should be autodetectable (unless we want to do e.g. 1.55.0p1 or similar if Rust hasn\u0027t re-released, but we want to), but we don\u0027t need to do that in this CL.",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "981ff092_a5d169e6",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-02T22:17:46Z",
      "side": 1,
      "message": "The only way I can think of to extract this automatically is by unpacking the artifact and interrogating the rustc binary.  That\u0027s not the worst thing in the world, but it seems like extra work for little benefit, especially when I think we do want to support local re-releases like you mentioned.  Thoughts?",
      "parentUuid": "ce8960ef_b01bf959",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c97c9e8a_7e07274e",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 131,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2021-11-02T23:12:59Z",
      "side": 1,
      "message": "Yeah, I was assuming we\u0027d run `unpacked/rustc --version`. If we want to be able to do re-releases, that would only work if our re-releases included an internal bump to the rustc version which I don\u0027t think is supported (since they would bump it to 1.55.1, which we explicitly would want to avoid). This is much more minor, but would basically be another step towards fully automating the process (e.g. once every 6 weeks, a set of CLs is produced and automatically tested by CI, and *then* handed off to us for review after it works or breaks). Patch releases requiring a manual version specification would not be a problem for that, as they wouldn\u0027t be part of a fully automated roller.",
      "parentUuid": "981ff092_a5d169e6",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a031a01e_a4d265a0",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 276,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2021-11-02T21:37:47Z",
      "side": 1,
      "message": "Again, not in this change, but maybe this tool should also produce the commits for:\n* Updating build/soong\n* Deleting the old rustc\n* Updating STAGE0 in the rustc build.\n\nAnyone doing this step would almost always want those commits too, even if they aren\u0027t going to land them all at the same time.",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0ee5a55_229a8913",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 276,
      "author": {
        "id": 1047255
      },
      "writtenOn": "2021-11-02T22:17:46Z",
      "side": 1,
      "message": "The only one of those I see a problem with is the build/soong change.  The Rust toolchain manifest doesn\u0027t include build/soong so you\u0027d have to supply a path to an AOSP tree.",
      "parentUuid": "a031a01e_a4d265a0",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "afd62c96_255e2c0d",
        "filename": "update_prebuilts.py",
        "patchSetId": 5
      },
      "lineNbr": 276,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2021-11-02T23:12:59Z",
      "side": 1,
      "message": "If we did this, we could map build/soong into the Rust toolchain manifest just for this. There should be a regex for which projects trigger a rebuild, so we could just not include build/soong in that list.",
      "parentUuid": "e0ee5a55_229a8913",
      "revId": "6d961ed558ffc42ab09b0e04c55c503130d9d419",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}