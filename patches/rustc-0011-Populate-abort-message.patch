From 1e0b3be1e7492f2adba9a5830c96aadb6b3c37db Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Thi=C3=A9baud=20Weksteen?= <tweek@google.com>
Date: Thu, 4 Feb 2021 10:37:54 +0100
Subject: [PATCH] Populate abort message

Change-Id: Ic4ee01bfe87001195f410ee02db0cb65caafa10f
---
 library/panic_abort/Cargo.toml                |  1 +
 library/panic_abort/src/android.rs            | 27 +++++++++++++++++++
 library/panic_abort/src/lib.rs                | 12 ++++++++-
 vendor/libc/.cargo-checksum.json              |  2 +-
 .../libc/src/unix/linux_like/android/mod.rs   |  2 ++
 5 files changed, 42 insertions(+), 2 deletions(-)
 create mode 100644 library/panic_abort/src/android.rs

diff --git a/library/panic_abort/Cargo.toml b/library/panic_abort/Cargo.toml
index b15919fad75..94bd77b4d81 100644
--- a/library/panic_abort/Cargo.toml
+++ b/library/panic_abort/Cargo.toml
@@ -10,6 +10,7 @@ bench = false
 doc = false
 
 [dependencies]
+alloc = { path = "../alloc" }
 cfg-if = { version = "0.1.8", features = ['rustc-dep-of-std'] }
 core = { path = "../core" }
 libc = { version = "0.2", default-features = false }
diff --git a/library/panic_abort/src/android.rs b/library/panic_abort/src/android.rs
new file mode 100644
index 00000000000..f68bfda4088
--- /dev/null
+++ b/library/panic_abort/src/android.rs
@@ -0,0 +1,27 @@
+#![feature(std_internals)]
+
+use alloc::string::String;
+use alloc::boxed::Box;
+use core::any::Any;
+use core::panic::BoxMeUp;
+
+#[rustc_std_internal_symbol]
+unsafe fn format_payload(payload: *mut &mut dyn BoxMeUp) -> String {
+    let payload = Box::from_raw((*payload).take_box());
+    let msg = match payload.downcast_ref::<&'static str>() {
+        Some(s) => String::from(*s),
+        None => match payload.downcast_ref::<String>() {
+            Some(s) => String::from(s),
+            None => String::from("<unsupported panic payload type>"),
+        },
+    };
+    return msg
+}
+
+pub(crate) unsafe fn android_set_abort_message(payload: *mut &mut dyn BoxMeUp) {
+        // std::ffi::CString is not available here. Use alloc::vec to create the char* argument.
+        // Manually append the final null byte.
+        let mut msg = format_payload(payload).into_bytes();
+        msg.push(0);
+        libc::android_set_abort_message(msg.as_ptr() as *const libc::c_char);
+}
diff --git a/library/panic_abort/src/lib.rs b/library/panic_abort/src/lib.rs
index 9690996e602..b19f14983ce 100644
--- a/library/panic_abort/src/lib.rs
+++ b/library/panic_abort/src/lib.rs
@@ -15,10 +15,15 @@
 #![feature(nll)]
 #![feature(panic_runtime)]
 #![feature(staged_api)]
+#![feature(std_internals)]
 #![feature(rustc_attrs)]
 #![feature(asm)]
 
+#[cfg(target_os = "android")]
+mod android;
+
 use core::any::Any;
+use core::panic::BoxMeUp;
 
 #[rustc_std_internal_symbol]
 #[allow(improper_ctypes_definitions)]
@@ -26,9 +31,14 @@ pub unsafe extern "C" fn __rust_panic_cleanup(_: *mut u8) -> *mut (dyn Any + Sen
     unreachable!()
 }
 
-// "Leak" the payload and shim to the relevant abort on the platform in question.
+// Use the relevant abort on the platform in question.
 #[rustc_std_internal_symbol]
 pub unsafe extern "C" fn __rust_start_panic(_payload: usize) -> u32 {
+
+    // Android has the ability to attach a message as part of the abort.
+    #[cfg(target_os = "android")]
+    android::android_set_abort_message(_payload as *mut &mut dyn BoxMeUp);
+
     abort();
 
     cfg_if::cfg_if! {
-- 
2.30.0.365.g02bc693789-goog

